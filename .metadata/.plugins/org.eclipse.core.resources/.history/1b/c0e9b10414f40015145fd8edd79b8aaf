package parallelCopy;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;


public class ParallelCopy {

	public static void main(String[] args) {
		ParallelCopy p=new ParallelCopy();
		try {
			p.copy("-s",new File("/home/partsaleva/Documents"),new File("/home/partsaleva/Documents_copy"));
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {			
			e.printStackTrace();
		}

	}

	private List<Path> smallFiles=new ArrayList<>();
	private List<Path> bigFiles=new ArrayList<>();
	
	
	public void copy(String command,File srcFolder, File destFolder) throws IOException, InterruptedException{
		if(srcFolder.isDirectory()){
			if(!destFolder.exists()){
				destFolder.mkdir();
			}
		}
		File[] files=srcFolder.listFiles();
        
		for (File file: files){
			if (file.isFile()){
				if (command.equals("-s")) {
					splitFilesBySize(file);
					createThreads(file.toPath());
				}
				else{
					copyFile(file.toPath(),destFolder.toPath());
				}
			}
			else if(file.isDirectory()){
				File p=new File(destFolder+"/"+file.getName().toString());
				copy(command,file, p);
			}
		}
		
	}
	
	private void copyFile(Path path, Path dest) throws IOException{		
		File f= new File(dest.toString()+"/"+path.getFileName());
		if (!f.exists()) {
			Files.copy(path, f.toPath());
		}		
	}
	
	private  boolean isSmall(final File file){
		return file.length() < 7000000;		
	}
	
	private void splitFilesBySize(File file){
		if (isSmall(file)) {
			smallFiles.add(file.toPath());
		} else {
			bigFiles.add(file.toPath());
		}
	}

	private void createThreads(Path dest) throws InterruptedException{
		for (Path path : bigFiles) {
			Thread tr=new Thread(new Runnable() {				
				@Override
				public void run() {
					try {
						copyFile(path, dest);
					} catch (IOException e) {
						e.printStackTrace();
					}
					
				}
			});
			tr.start();
			tr.join();
		}
		int count=0;
		for (Path path : smallFiles) {
			count++;
			if (count%5==1) {
				Thread tr=new Thread(new Runnable() {				
					@Override
					public void run() {
						try {
							copyFile(path, dest);
						} catch (IOException e) {
							e.printStackTrace();
						}
						
					}
				});
				tr.start();
				tr.join();
			}
			
		}
	}
}

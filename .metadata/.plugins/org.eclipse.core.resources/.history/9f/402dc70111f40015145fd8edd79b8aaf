package parallelCopy;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;


public class ParallelCopy {

	public static void main(String[] args) {
		try {
			copy("",new File("/home/partsaleva/Documents"),new File("/home/partsaleva/Documents_copy"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public static void copy(String command, File srcFolder, File destFolder) throws IOException{
		if(srcFolder.isDirectory()){
			if(!destFolder.exists()){
				destFolder.mkdir();
			}
		}
		File[] files=srcFolder.listFiles();
        
		for (File file: files){
			if (file.isFile()){
				copyFile(file.toPath(),destFolder.toPath());
			}
			else if(file.isDirectory()){
				File p=new File(destFolder+"/"+file.getName().toString());
				copy(command,file, p);
			}
		}
		
	}
	
	private static void copyFile(Path path, Path dest) throws IOException{		
		File f= new File(dest.toString()+"/"+path.getFileName());
		if (!f.exists()) {
			Files.copy(path, f.toPath());
		}		
	}
	
	private static boolean isSmall(final File file){
		return file.length() < 7000000;		
	}
	

}

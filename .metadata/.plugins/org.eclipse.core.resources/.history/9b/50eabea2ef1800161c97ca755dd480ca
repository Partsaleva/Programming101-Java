package managers;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Queue;

import database.InitialFiles;
import models.Drone;
import models.Product;
import models.Warehouse;


public class WarehouseManager {

	public static void main(String[] args) {
	}

	@SuppressWarnings("unchecked")
	public List<Warehouse> getWarehouses(){
		List<Warehouse> warehouses=null;
		try(ObjectInputStream in=new ObjectInputStream(
				new BufferedInputStream(
						new FileInputStream("warehouses")))){
			
			warehouses=(List<Warehouse>) in.readObject();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		return warehouses;
		
	}
	
	public void updateWarehouseData(Warehouse w){
		
		Map<Product, Integer> products=w.getProducts();
		System.out.println(products.size());
		Queue<Drone> drones=w.getDrones();
		
		createUpdatedProductFile(w,products);
		createUpdatedDroneFile(w,drones);
		createUpdatedWarehouseFile(w);
		
	}
	
	private void createUpdatedProductFile(Warehouse w,Map<Product, Integer> products ){
		List<Product> prod=new ArrayList<Product>();
		//iterate over map; put in List; save in file
		for (Entry<Product, Integer> entry : products.entrySet()) {
			prod.add(entry.getKey());
		}
		
		try (ObjectOutputStream objStream=new ObjectOutputStream(
				new BufferedOutputStream(
						new FileOutputStream("products"+w.getId())))){
			
			objStream.writeObject(prod);
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void createUpdatedDroneFile(Warehouse w,Queue<Drone> drones){
		List<Drone> dr=new ArrayList<Drone>();
		//iterate over queue; put in List; save in file
		for (Drone drone : drones) {
			dr.add(drone);
		}
		
		try (ObjectOutputStream objStream=new ObjectOutputStream(
				new BufferedOutputStream(
						new FileOutputStream("drones"+w.getId())))){
			
			objStream.writeObject(dr);
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	@SuppressWarnings("unchecked")
	private void createUpdatedWarehouseFile(Warehouse w){
		List<Warehouse> list=new ArrayList<Warehouse>();
		try(ObjectInputStream input = new ObjectInputStream(
				new BufferedInputStream(
						new FileInputStream("warehouses")))){
			list=(List<Warehouse>) input.readObject();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		for (Warehouse warehouse : list) {
			if (w.getId().equals(warehouse.getId())) {
				list.remove(warehouse);
				list.add(w);
			}
		}
		InitialFiles i=new InitialFiles();
		i.createWarehouseFile(list);
	}
	


	public void addWarehouse(Warehouse w){
		Map<Product, Integer> products=getProductsForWarehouse(w.getId());
		Queue<Drone> drones=getDronesForWarehouse(w.getId());
		
		w.setProducts(products);
		w.setDrones(drones);
		
		List<Warehouse> list=getWarehouses();
		list.add(w);
		
		try (ObjectOutputStream objStream=new ObjectOutputStream(
				new BufferedOutputStream(
						new FileOutputStream("warehouses",true)))){
			//save warehouse as object in file
			objStream.writeObject(list);

		} catch (FileNotFoundException e1) {				
			e1.printStackTrace();
		} catch (IOException e1) {			
			e1.printStackTrace();
		}
	}
	@SuppressWarnings("unchecked")
	private Map<Product, Integer> getProductsForWarehouse(String warehouseId){		
		Map<Product, Integer> prod=new HashMap<Product, Integer>();
		List<Product> p=null;
		
		try(ObjectInputStream in =new ObjectInputStream(
				new BufferedInputStream(
						new FileInputStream("products"+warehouseId)))){
			
			p=(List<Product>) in.readObject();
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} 
		
		for (Product product : p) {		
			prod.put(product, product.getQuantity());		
		}
		return prod;
		
	}
	
	private Queue<Drone> getDronesForWarehouse(String warehouseId){
		Queue<Drone> drones=new LinkedList<>();
		try(ObjectInputStream in =new ObjectInputStream(
				new BufferedInputStream(
						new FileInputStream("drones"+warehouseId)))){
			
			@SuppressWarnings("unchecked")
			List<Drone> d=(List<Drone>) in.readObject();
			for (Drone drone : d) {
				drones.add(drone);				
			}
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		return drones;
	}
	
	public Warehouse getWarehouseById(String id){
		Warehouse w=null;
		List<Warehouse> warehouses =getWarehouses();
		for (Warehouse warehouse : warehouses) {
			if(warehouse.getId().equals(id)){
				w=warehouse;
			}
		}
		System.out.println(w);
		return w;
	}
}

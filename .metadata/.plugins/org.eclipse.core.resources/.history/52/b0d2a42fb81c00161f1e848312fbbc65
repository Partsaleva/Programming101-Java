package managers;

import java.sql.Timestamp;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import exceptions.ProductsNotFoundException;
import exceptions.noSuitableDroneFoundException;
import models.Drone;
import models.Location;
import models.Product;
import models.Warehouse;
import models.requests.DeliveryRequest;

public class DeliveryManager {

	DeliveryRequest deliveryRequest;
	
	public DeliveryRequest runDeliveryRequest(Warehouse warehouse,String request) 
			throws noSuitableDroneFoundException, ProductsNotFoundException {
		String[] data=request.split(" ");
		String id=data[1];
		Date date=new Date();
		String[] location=data[4].split(",");
		double X=Double.parseDouble(location[0]);
		double Y=Double.parseDouble(location[1]);
		
		Location deliveryLocation=null;
		//check if coordinates are valid
		if(X > 1000 || Y > 1000){
			throw new IllegalArgumentException("Coodrdinates outside city ");
			
		}else if(X < 0 || Y < 0){
			throw new IllegalArgumentException("Coodrdinates < 0 ");
			
		}else{
			deliveryLocation=new Location(X,Y);
		}
		
		Map<String, Integer> order=new HashMap<String, Integer>();
		
		for (int i = 5; i < data.length; i=i+2) {
			String name=data[i]; 
			int quantity=Integer.parseInt(data[i+1]);			
			order.put(name, quantity);
		}
		DeliveryRequest deliveryRequest=new DeliveryRequest(id, new Timestamp(date.getTime()),
				deliveryLocation, order);
		
		DeliveryManager delM = new DeliveryManager();
		delM.executeDelivery(warehouse,deliveryRequest);
		this.deliveryRequest=deliveryRequest;
		return deliveryRequest;		
	}

	public void executeDelivery(Warehouse warehouse,DeliveryRequest deliveryRequest) 
			throws noSuitableDroneFoundException, ProductsNotFoundException {
		DronesControl control=new DronesControl(); 
		if(isAllProductsInStock(warehouse.getProducts(), deliveryRequest.getOrder())){
			
			int deliveryWeight=getProdustsFromWarehouse(warehouse.getProducts(), deliveryRequest.getOrder());
			int distance=(int) calculateDistance(warehouse.getLocation(), deliveryRequest.getTargetCoordinates());
			estimateTimeOfArrival(deliveryRequest, distance);
			List<Drone> dronesForDelivery=control.getDronesForDelivery(warehouse ,deliveryWeight, distance);
			control.chargeUsedDrones(warehouse,dronesForDelivery, distance, deliveryRequest.getTimestamp());		
		}
		
	}


	private void estimateTimeOfArrival(DeliveryRequest deliveryRequest, int distance) {	
		int timeForLoadUnload=deliveryRequest.getOrder().size() *2 ;
		int time=distance+timeForLoadUnload;
		int hours = time / 60; 
		int min = time % 60;
		System.out.printf("Estimated time of arrival: %d:%02d (hours)\n",hours, min );
	}

	

	//getProducts and calculate weightUnits
	private int getProdustsFromWarehouse(Map<String, Product> products,
			Map<String, Integer> order) {
		int weightUnits=0;
		for (String key : order.keySet()) {
			weightUnits +=  products.get(key).getWeight() * order.get(key);
			
			Product updatedProduct=new Product(key, products.get(key).getWeight(), 
					products.get(key).getQuantity()- order.get(key));
			products.put(key, updatedProduct);
		}
		return weightUnits;
	}

	private boolean isAllProductsInStock(Map<String, Product> warehouseProducts, Map<String, Integer> order) 
			throws ProductsNotFoundException{
		for (String key : order.keySet()) {
			if(!warehouseProducts.containsKey(key)){
				throw new ProductsNotFoundException("One or more Products not in stock");
			}
		}
		return true;		
	}
	
	//distance between warehouse and delivery location
	private double calculateDistance(Location w, Location d){
		//The distance from cell [x1, y1] to cell [x2, y2] is calculated as 
		//((x1 - x2)^2 + (y1 - y2)^2)^-2 (two-dimensional Euclidean distance).
		double distanceUnits=Math.sqrt((w.getX()-d.getX()) * (w.getX()-d.getX()) + 
				( (w.getY() - d.getY()) * (w.getY() - d.getY()) ));
		return distanceUnits;		
	}
	
}

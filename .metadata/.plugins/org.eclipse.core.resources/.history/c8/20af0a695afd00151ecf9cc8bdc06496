package measurementTool;

import java.util.concurrent.atomic.AtomicInteger;

import concurrentDataStructure.*;

public class MeasurementTool {

	private static final int NUMBER_OF_ELEMENTS = 1000000;
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	
	
	static class Producer implements Runnable{

		private int count=0;
		private IMemory memory;
		private AtomicInteger totalElemToProduce;
		
		
		public Producer(IMemory memory, AtomicInteger totalElemToProduce) {
			this.memory = memory;
			this.totalElemToProduce = totalElemToProduce;
		}


		@Override
		public void run() {
			int elementsToProduce=-1;
			while((elementsToProduce=totalElemToProduce.getAndDecrement()) > 0){
				try {
					memory.put(elementsToProduce);
					System.out.println("Produced " + (NUMBER_OF_ELEMENTS - elementsToProduce) + " " + Thread.currentThread().getName());
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			
		}
	}
	
	static class Consumer implements Runnable {
	    IMemory memory;
	    private AtomicInteger totalElementsToConsume;
	    public Consumer(IMemory memory, AtomicInteger totalElementsToConsume) {
	      this.memory = memory;
	      this.totalElementsToConsume = totalElementsToConsume;
	    }

	    @Override
	    public void run() {
	      while(totalElementsToConsume.getAndAdd(0) > 0) {
	        try {
	          Object result = memory.get();
	          totalElementsToConsume.decrementAndGet();
	          System.out.println("Consumed " + result + " " + Thread.currentThread().getName());
	        } catch (InterruptedException e) {
	          e.printStackTrace();
	        }
	      }
	    }
	  }
}

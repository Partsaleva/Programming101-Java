package practice;

import java.util.Stack;

public class DfsExample {

	static int[][] graph;
	public static void main(String[] args) {
		init();

	}


	public static void dfs(){
		int currentVertex=1;
		Stack<Integer> traversed = new Stack<>();
		traversed.push(currentVertex);
		while(!traversed.empty()){
			currentVertex=traversed.peek();
			int neighborCount =graph[currentVertex][0];
			if (neighborCount > 0) {
				
			}else{
				traversed.pop();
			}
		}
	}
	
	private static void init() {
		graph[1][0]=1;
		graph[1][1]=2;
		
		graph[2][0]=1;
		graph[2][1]=1;
		
		graph[3][0]=1;
		graph[3][1]=5;
		
		graph[4][0]=1;
		graph[4][1]=7;
		
		graph[5][0]=1;
		graph[5][1]=3;
		
		graph[6][0]=1;
		graph[6][1]=2;
		
		graph[7][0]=1;
		graph[7][1]=2;
		
	}
}

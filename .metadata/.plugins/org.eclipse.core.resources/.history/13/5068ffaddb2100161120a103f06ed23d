package sortingAlgorithms;

import java.util.List;

public class MergeSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	public void mergeSort(List<Integer> A , int begin, int end, List<Integer> B){
		if(end - begin < 2)                       // if run size == 1
	        return;                                 //   consider it sorted
	    // recursively split runs into two halves until run size == 1,
	    // then merge them and return back up the call chain
	    int middle = (end + begin) / 2;              // iMiddle = mid point
	    mergeSort(A, begin,  middle, B);  // split / merge left  half
	    mergeSort(A, middle,    end, B);  // split / merge right half
	    merge(A, begin, middle, end, B);
	}
	
	
	public void merge(List<Integer> A , int begin, int middle, int end, List<Integer> B){
		int iBegin=begin;
		int iMid=middle;
		
		for (int i = iBegin; i < end; i++){
			if (iBegin < iMid && (iMid >=end || A.get(iBegin)< A.get(iMid))) {
				B.add(A.get(iBegin));
				iBegin++;
			}else{
				B.add(A.get(iMid));
				iMid++;
			}
		}
	}
}
